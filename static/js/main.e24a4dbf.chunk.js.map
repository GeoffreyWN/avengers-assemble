{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","avenger","id","alt","name","email","username","CardList","avengers","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","catch","this","filteredAvengers","filter","toLocaleLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"+SAYeA,G,kBATF,SAACC,GAAD,OACT,yBAAKC,UAAU,kBACX,yBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,sBAChF,4BAAML,EAAMG,QAAQG,MACpB,2BAAIN,EAAMG,QAAQI,OAClB,2BAAIP,EAAMG,QAAQK,aCMXC,EATG,SAAAT,GACd,OACI,yBAAKC,UAAU,aACVD,EAAMU,SAASC,KAAI,SAACR,GAAD,OAAa,kBAAC,EAAD,CAAMS,IAAKT,EAAQC,GAAID,QAASA,SCC9DU,G,MAJG,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACd,2BAAOC,KAAK,SAASf,UAAU,SAASa,YAAaA,EAAaG,SAAUF,MC+CjEG,E,kDA7Cb,aAAe,IAAD,8BACZ,gBAsBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SArBtC,EAAKC,MAAQ,CACXd,SAAU,CACR,CAAEJ,KAAM,OAAQF,GAAI,KACpB,CAAEE,KAAM,OAAQF,GAAI,KACpB,CAAEE,KAAM,MAAQF,GAAI,KACpB,CAAEE,KAAM,WAAYF,GAAI,KACxB,CAAEE,KAAM,gBAAiBF,GAAI,KAC7B,CAAEE,KAAM,UAAWF,GAAI,MAEzBiB,YAAa,IAZH,E,gEAgBO,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACV,SAAWmB,OACxCC,OAAM,iBAAM,mD,+BAOL,IAAD,EAEyBC,KAAKP,MAA9Bd,EAFA,EAEAA,SAAUW,EAFV,EAEUA,YAEXW,EAAmBtB,EAASuB,QAAO,SAAA9B,GAAO,OAAIA,EAAQG,KAAK4B,oBAAoBC,SAASd,EAAYa,wBAC1G,OAEI,yBAAKjC,UAAU,OACb,iDAEA,kBAAC,EAAD,CAAWa,YAAY,kBAAkBC,aAAcgB,KAAKhB,eAC5D,kBAAC,EAAD,CAAUL,SAAUsB,S,GAvCZI,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdrB,OAAM,SAAAsB,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e24a4dbf.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nconst Card = (props) => (\n    <div className=\"card-container\">\n        <img src={`https://robohash.org/${props.avenger.id}?set=set5&size=150x190`} alt=\"strongest avenger\"/>\n        <h2>{ props.avenger.name}</h2>\n        <p>{props.avenger.email}</p>\n        <p>{props.avenger.username}</p>\n    </div>\n)\n\nexport default Card","import React from 'react'\nimport './card-list.styles.css'\n\nimport Card from '../card/card.component'\n\n const CardList = props => {\n    return  (\n        <div className=\"card-list\">\n            {props.avengers.map((avenger) => <Card key={avenger.id} avenger={avenger}/> )}\n        </div>\n    )\n    \n}\n\nexport default CardList","import React from 'react';\n\nimport './search-box.styles.css'\n\n\nconst SearchBox = ({placeholder, handleChange}) => (\n    <input type=\"search\" className=\"search\" placeholder={placeholder} onChange={handleChange} />\n);\n\nexport default SearchBox\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport CardList from './components/card-list/card-list.component'\nimport SearchBox from './components/search-box/search-box.component'\n\n\nclass App extends Component {\n  constructor() {\n    super()\n\n    this.state = {\n      avengers: [\n        { name: 'Hulk', id: '1' },\n        { name: 'Thor', id: '2' },\n        { name: 'Cap',  id: '3' },\n        { name: 'Iron Man', id: '4' },\n        { name: 'Black Panther', id: '5' },\n        { name: 'Ant Man', id: '6' },\n      ],\n      searchField: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({avengers : users}))\n    .catch(() => 'Sorry an error occurred while fetching data')\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value}) \n  }\n\n  render() {\n\n    const {avengers, searchField} = this.state;\n\n    const filteredAvengers = avengers.filter(avenger => avenger.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase()));\n    return (\n      \n        <div className=\"App\">\n          <h1>Avengers Assemble</h1>\n          {/* <input type=\"search\" placeholder=\"search avengers\" handleChange={(e) => this.setState({ searchField: e.target.value}) }/> */}\n          <SearchBox placeholder=\"search avengers\" handleChange={this.handleChange} />\n          <CardList avengers={filteredAvengers} />\n        </div>\n      \n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}